graph
prix <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = T, returntrees = T)$price)
k
prix_achat <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = F, returntrees = T)$price)
prix_put <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = T, returntrees = T)$price)
??ggplot
liste <-c("magrittr", "derivmkts", "httr","ggplot2")
data_graph <- data.frame(
)
Type = rep(c("Call", "Put"), each = length(K)))
Type = rep(c("Call", "Put"), each = length(K)))
Type = rep(c("Call", "Put"), each = length(K)))
Type = rep(c("Call", "Put"), each = length(K))
Type = rep(c("Call", "Put"), each = length(k))
ggplot(options_data, aes(x = K, y = Premium, color = Type)) +
geom_line(size = 1.2) +
labs(
title = "Courbe des primes d'une option d'achat et de vente",
x = "Prix d'exercice (K)",
y = "Coût de l'option (Prime)",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggplott2::ggplot(options_data, aes(x = K, y = Premium, color = Type)) +
geom_line(size = 1.2) +
labs(
title = "Courbe des primes d'une option d'achat et de vente",
x = "Prix d'exercice (K)",
y = "Coût de l'option (Prime)",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot2::ggplot(options_data, aes(x = K, y = Premium, color = Type)) +
geom_line(size = 1.2) +
labs(
title = "Courbe des primes d'une option d'achat et de vente",
x = "Prix d'exercice (K)",
y = "Coût de l'option (Prime)",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot2::ggplot(data_graph, aes(x = K, y = Premium, color = Type)) +
geom_line(size = 1.2) +
labs(
title = "Courbe des primes d'une option d'achat et de vente",
x = "Prix d'exercice (K)",
y = "Coût de l'option (Prime)",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
data_graph <- data.frame(
data_graph <- data.frame(
data_graph <- data.frame(
k = rep(k, 2),
prix = c(prix_achat, prix_put),
type = rep(c("Call", "Put"), each = length(k))
)
type = rep(c("Call", "Put"), each = length(k)))
data_graph <- data.frame(
)
data_graph <- data.frame(
data_graph <- data.frame(prix_exercice = k, prix_call = prix_achat, prix_put = prix_put)
reset()
data_graph <- data.frame(prix_exercice = k, prix_call = prix_achat, prix_put = prix_put)
data_graph
names_to = "type_option", values_to = "prix_option")
data_long <- pivot_longer(data_graph, cols = c(prix_call, prix_put),names_to = "type_option", values_to = "prix_option")
data_long <- tidyr::pivot_longer(data_graph, cols = c(prix_call, prix_put),names_to = "type_option", values_to = "prix_option")
ggplot2::ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) +
geom_line(size = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
k <- seq(from = 50, to = 200, by = 5)
prix_achat <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = F, returntrees = T)$price)
prix_achat <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = T, returntrees = T)$price)
k <- seq(from = 50, to = 200, by = 5)
prix_achat <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = F, returntrees = T)$price)
prix_achat <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = T, returntrees = T)$price)
data_graph <- data.frame(prix_exercice = k, prix_call = prix_achat, prix_put = prix_put)
data_long <- pivot_longer(data_graph, cols = c(prix_call, prix_put),
names_to = "type_option", values_to = "prix_option")
data_long <- tidyr::pivot_longer(data_graph, cols = c(prix_call, prix_put),
names_to = "type_option", values_to = "prix_option")
ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) +
geom_line(size = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot2::ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) +
geom_line(size = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot2::ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) + geom_line(size = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option")+ theme_minimal()
ggplot2::ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) + geom_line(size = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option")+ theme_minimal()
library(ggplot2)
ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) + geom_line(size = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option")+ theme_minimal()
ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) + geom_line(linewitdth = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option")+ theme_minimal()
ggplot(data_long, aes(x = prix_exercice, y = prix_option, color = type_option)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",
color = "Type d'option")+ theme_minimal()
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix des options selon le prix d'exercice",
x = "Prix d'exercice (K)",
y = "Prix de l'option",)+ theme_minimal()
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal()
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
theme(plot.title = element_text(hjust = 0.5, face = "bold")),
axis.title = element_text(size = 12)
)
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
plot.title = element_text(size = 12,hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold")
)
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent = 100$ selon le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
plot.title = element_text(size = 12,hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold")
)
ggplot
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent = 100$ selon le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent = 100$ avec le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_minimal() + theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent est de 100 $ avec le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_bw() + theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call
graph_call
graph_call <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent est de 100 $ avec le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_classic() + theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call
## CALL
k <- seq(from = 50, to = 200, by = 5)
prix_achat <- sapply(k, function(k) binomopt(s = 100, k = k, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = F, returntrees = T)$price)
data_graph <- data.frame(prix_exercice = k, prix_call = prix_achat)
graph_call <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option d'achat européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent est de 100 $ avec le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_classic() + theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call
graph_put <- ggplot(data_graph, aes(x = prix_exercice, y = prix_put)) + geom_line(linewidth = 1.2) +
labs(
title = "Prix d'un option de vente européenne selon différentes valeurs d'exercice (k)",
subtitle = "Le prix initial du sous-jacent est de 100 $ avec le modèle binomial à 52 périodes",
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)",)+ theme_classic() + theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_put
knitr::opts_chunk$set(echo = TRUE)
u_quatreper <- exp(r_log*1/4+sig*sqrt(1/4))
knitr::opts_chunk$set(echo = TRUE)
### Liste des paquetages
liste <-c("magrittr", "derivmkts", "httr","ggplot2")
installation <- liste %in% installed.packages()
banque_can <- read.csv("taux_can.csv")
## importation données mensuelles historiques
data_histo <- read.csv("DonnéesTPGRF2(version2).csv")
data_histo <- data_histo[-1, 13]
## moyenne taux banque du canada, mensuelle
r <- mean(banque_can[, 2])/100
r_log <- log(1 + r)
h <- 1/12 # les données sont mensuelles
longeur_donnee <- length(data_histo)
donnee_ln <- numeric(longeur_donnee) # pour le remplir
donnee_ln[1] <- NA
for (i in 2:longeur_donnee){
(donnee_ln[i] <- log(data_histo[i]/data_histo[i-1]))
}
sig <- sd(donnee_ln[-1])/sqrt(h)
u_quatreper <- exp(r_log*1/4+sig*sqrt(1/4))
banque_can <- read.csv("taux_can.csv")
## importation données mensuelles historiques
data_histo <- read.csv("DonnéesTPGRF2(version2).csv")
data_histo <- data_histo[-1, 13]
## moyenne taux banque du canada, mensuelle
r <- mean(banque_can[, 2])/100
r_log <- log(1 + r)
h <- 1/12 # les données sont mensuelles
longeur_donnee <- length(data_histo)
donnee_ln <- numeric(longeur_donnee) # pour le remplir
donnee_ln[1] <- NA
for (i in 2:longeur_donnee){
(donnee_ln[i] <- log(data_histo[i]/data_histo[i-1]))
}
sig <- sd(donnee_ln[-1])/sqrt(h)
u_quatreper <- exp(r_log*1/4+sig*sqrt(1/4))
d_quatreper <- exp(r_log*1/4-sig*sqrt(1/4))
p_quatreper <- exp(r_log*1/4-d_quatreper)/(u_quatreper-d_quatreper)
banque_can <- read.csv("taux_can.csv")
## importation données mensuelles historiques
data_histo <- read.csv("DonnéesTPGRF2(version2).csv")
data_histo <- data_histo[-1, 13]
## moyenne taux banque du canada, mensuelle
r <- mean(banque_can[, 2])/100
r_log <- log(1 + r)
h <- 1/12 # les données sont mensuelles
longeur_donnee <- length(data_histo)
donnee_ln <- numeric(longeur_donnee) # pour le remplir
donnee_ln[1] <- NA
for (i in 2:longeur_donnee){
(donnee_ln[i] <- log(data_histo[i]/data_histo[i-1]))
}
sig <- sd(donnee_ln[-1])/sqrt(h)
u_quatreper <- exp(r_log*1/4+sig*sqrt(1/4))
d_quatreper <- exp(r_log*1/4-sig*sqrt(1/4))
p_quatreper <- (exp(r_log*1/4)-d_quatreper)/(u_quatreper-d_quatreper)
update.packages("fastmap")
knitr::opts_chunk$set(echo = TRUE)
### Liste des paquetages
liste <-c("magrittr", "derivmkts", "httr","ggplot2", "RQuantLib")
installation <- liste %in% installed.packages()
knitr::opts_chunk$set(echo = TRUE)
### Liste des paquetages
liste <-c("magrittr", "derivmkts", "httr","ggplot2", "RQuantLib")
installation <- liste %in% installed.packages()
if(length(liste[!installation]) > 0) {
install.packages(liste[!installation], repos = "https://cran.rstudio.com/")
}
lapply(liste, require, character.only = TRUE)
banque_can <- read.csv("taux_can.csv")
## importation données mensuelles historiques
data_histo <- read.csv("DonnéesTPGRF2(version2).csv")
data_histo <- data_histo[-1, 13]
## moyenne taux banque du canada, mensuelle
r <- mean(banque_can[, 2])/100
r_log <- log(1 + r)
h <- 1/12 # les données sont mensuelles
longeur_donnee <- length(data_histo)
donnee_ln <- numeric(longeur_donnee) # pour le remplir
donnee_ln[1] <- NA
for (i in 2:longeur_donnee){
(donnee_ln[i] <- log(data_histo[i]/data_histo[i-1]))
}
sig <- sd(donnee_ln[-1])/sqrt(h)
u_quatreper <- exp((r_log*1/4)+sig*sqrt(1/4))
d_quatreper <- exp((r_log*1/4)-sig*sqrt(1/4))
p_quatreper <- (exp(r_log*1/4)-d_quatreper)/(u_quatreper-d_quatreper)
u_52per <- exp((r_log*1/52)+sig*sqrt(1/52))
d_52per <- exp((r_log*1/52)-sig*sqrt(1/52))
p_52per <- (exp(r_log*1/52)-d_52per)/(u_52per-d_52per)
arbre <- function (s, k, v, r, tt, d, nstep, putopt = FALSE, american = TRUE,
plotvalues = FALSE, plotarrows = FALSE, drawstrike = TRUE,
pointsize = 4, ylimval = c(0, 0), saveplot = FALSE, saveplotfn = "binomialplot.pdf",
crr = FALSE, jarrowrudd = FALSE, titles = TRUE, specifyupdn = FALSE,
up = 1.5, dn = 0.5, returnprice = FALSE, logy = FALSE)
{
setylim <- ifelse((sum(ylimval^2) == 0), FALSE, TRUE)
y <- binomopt(s, k, v, r, tt, d, nstep, american, putopt,
specifyupdn, crr, jarrowrudd, up, dn, returnparams = TRUE,
returntrees = TRUE)
h <- tt/nstep
for (i in c("up", "dn", "p")) assign(i, y$params[i])
for (i in c("stree", "exertree", "oppricetree", "probtree")) assign(i,
y[["i"]])
nn <- 0:nstep
payoffmult <- ifelse((putopt), -1, 1)
stree <- y$stree
exertree <- y$exertree
oppricetree <- y$oppricetree
probtree <- y$probtree
bondtree <- y$bondtree
deltatree <- y$deltatree
plotcolor <- ifelse(exertree, "green3", "red")
if (saveplot)
pdf(saveplotfn)
ylim_default <- c(0, max(stree) * 1.03)
savepar <- par(no.readonly = TRUE)
if (logy)
par(ylog = TRUE)
plot(rep(nn, nn + 1) * h, stree[stree > 0], ylim = ifelse(c(setylim,
setylim), ylimval, c(min(stree[stree > 1] - 0.95), max(stree) *
1.03)), col = plotcolor[stree > 0], pch = 21,
cex = ifelse(stree[stree > 0], sqrt(probtree[stree > 0]) *
pointsize, 1), bg = plotcolor[stree > 0],
xlab = ifelse(titles, "Période binomiale (année)", ""),
ylab = ifelse(titles, "Prix de l'action ($)", ""),
main = if (titles) paste(ifelse(putopt, "Option de vente", "Option d'achat"),
ifelse(american, "américaine", "européenne")),
log = ifelse(logy, "y", ""))
if (titles)
mtext(paste0("Stock = ", format(s, digits = 3), ",Prix d'exercice = ",
format(k, digits = 3), ", Temps = ", format(tt, digits = 4),
ifelse(tt == 1, " an,", " ans,"), " Prix = ",
format(oppricetree[1, 1], digits = 5)))
if (drawstrike)
abline(h = k, lty=2)
yoffset <- ifelse(setylim, 0.03 * (ylimval[2] - ylimval[1]),
0.03 * max(stree))
if (plotarrows) {
for (i in 1:nstep) {
for (j in 1:i) {
arrows((i - 1) * h, stree[j, i], c(i, i) * h,
c(stree[j, i + 1], stree[j + 1, i + 1]), length = 0.06)
}
}
}
if (plotvalues) {
for (i in 1:(nstep + 1)) {
text((i - 1) * h, stree[1:i, i] + yoffset + 3, format(stree[1:i,
i],
digits = 3), cex = 0.8)
}
for (i in 1:(nstep)) {
text((i - 1) * h, stree[1:i, i] + yoffset, format(deltatree[1:i,
i],
digits = 3), cex = 0.8, col="deeppink")
}
for (i in 1:(nstep)) {
text((i - 1) * h, stree[1:i, i] + yoffset-8, format(bondtree[1:i,
i],
digits = 3), cex = 0.8, col="blue")
}
for (i in 1:(nstep)) {
text((i - 1) * h, stree[1:i, i] + yoffset-11, format(oppricetree[1:i, i],
digits = 3), cex = 0.8, col="purple")
}
legend("topleft", c("S", "Delta", "B", "Prix"), bty="n", lty=rep(1, 6),
col=c("black", "deeppink", "blue", "purple"), cex=0.8)
}
if (saveplot)
dev.off()
if (returnprice)
return(oppricetree[1, 1])
}
arbre(s = 100, k = 95, v = sig, r = r, tt = 1, d = 0, nstep = 4, american = FALSE,
putopt = TRUE, plotvalues = TRUE, plotarrows = TRUE, returnprice = TRUE,
drawstrike = FALSE)
## option d'achat européenne k = 110, prix initial de l'indice = 100
arbre(s = 100, k = 110, v = sig, r = r_log, tt = 1, d = 0, nstep = 4, american = FALSE,
putopt = FALSE, plotvalues = TRUE, plotarrows = TRUE, returnprice = TRUE,
drawstrike = FALSE)
## option de vente européenne avec prix d'exercice de 95, prix initial de l'indice = 100
put95_52p = binomopt(s = 100, k = 95, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = T)
## option d'achat européenne avec prix d'exercice de 110, prix initial de l'indice = 100
call110_52p = binomopt(s = 100, k = 110, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = F)
## option de vente européenne avec prix d'exercice de 95, prix initial de l'indice = 100
put95_52p = binomopt(s = 100, k = 95, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = T)
## option d'achat européenne avec prix d'exercice de 110, prix initial de l'indice = 100
call110_52p = binomopt(s = 100, k = 110, v = sig, r = r_log, tt = 1, d = 0, nstep = 52, american = F,
putopt = F)
call_asia <- AsianOption(type = "call",averageType = "arithmetic",
underlying = 100,strike = 110, dividendYield = 0,
riskFreeRate = r_log, maturity = 1,
volatility = sig, steps = 52)
put_asia <- BarrierOption(type = "put",
barrierType = "upout", barrier = 105,
underlying = 100, strike = 95,
dividendYield = 0, riskFreeRate = r_log,
maturity = 1, volatility = sig)
call_asia <- AsianOption("arithmetic",
"call",
100,
110,0,
r_log,1,sig,
0,
1,
52)
barrier <- 105
put_asia <-BarrierOption("upout",
"put",
100,
95,
0,
r_log,
1,
sig,
105)
View(call_asia)
View(put_asia)
