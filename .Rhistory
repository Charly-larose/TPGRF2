# Tracé
ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_put,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_put + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
title = "Convergence du prix du put européen\nBinomial vs Black–Scholes",
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
s     <- 100
k     <- 95
tt    <- 1
d     <- 0
bs_put <- put_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = TRUE,    # put
american    = FALSE,   # européen
returnprice = TRUE     # on ne veut que le prix
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices
)
convergence <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_put,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_put + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
title = "Convergence du prix du put européen\nBinomial vs Black–Scholes",
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
convergence
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_bs = prix_achat_BS)
graph_call+BS <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call_BS)) +
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_bs = prix_achat_BS)
graph_call_BS <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call_BS)) +
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call_BS)) +
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_bw() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
s     <- 100
k     <- 95
tt    <- 1
d     <- 0
bs_call <- call_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices_call <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = FALSE,
american    = FALSE,
returnprice = TRUE
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices_call
)
convergence_call <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_put,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_put + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
convergence_call
s     <- 100
k     <- 110
tt    <- 1
d     <- 0
bs_call <- call_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices_call <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = FALSE,
american    = FALSE,
returnprice = TRUE
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices_call
)
convergence_call <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_put,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_put + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
convergence_call
s     <- 100
k     <- 110
tt    <- 1
d     <- 0
bs_call <- call_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
bs_call
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices_call <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = FALSE,
american    = FALSE,
returnprice = TRUE
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices_call
)
convergence_call <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_put,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_put + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
s     <- 100
k     <- 110
tt    <- 1
d     <- 0
bs_call <- call_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices_call <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = FALSE,
american    = FALSE,
returnprice = TRUE
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices_call
)
convergence_call <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_call,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_put + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
convergence_call
s     <- 100
k     <- 110
tt    <- 1
d     <- 0
bs_call <- call_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices_call <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = FALSE,
american    = FALSE,
returnprice = TRUE
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices_call
)
convergence_call <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_call,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_call + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
convergence_call
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t=1, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t=1, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_bw() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
# Votre fonction Black–Scholes
div <- 0
k <- seq(from = 0, to = 200, by = 5)
prix_achat_BS <- sapply(k, function(k) call_BS(s, k, sig, r_log, t=1, div))
data_graph_BS <- data.frame(prix_exercice = k, prix_call_BS = prix_achat_BS)
graph_call_BS <- ggplot(data_graph_BS, aes(x = prix_exercice, y = prix_call_BS)) + geom_line()
labs(
x = "Prix d'exercice ($)",
y = "Prix de l'option ($)"
) +
theme_classic() +
theme(
plot.title = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12)
)
graph_call_BS
s     <- 100
k     <- 110
tt    <- 1
d     <- 0
bs_call <- call_BS(s = s, k = k, sig = sig, r_log = r_log, t = tt, div = d)
# Boucle sur n pas pour le binomial
n_max       <- 100
binom_prices_call <- sapply(1:n_max, function(n) {
arbre(
s           = s,
k           = k,
v           = sig,
r           = r_log,
tt          = tt,
d           = d,
nstep       = n,
putopt      = FALSE,
american    = FALSE,
returnprice = TRUE
)
})
df <- data.frame(
nstep    = 1:n_max,
Binomial = binom_prices_call
)
convergence_call <- ggplot(df, aes(x = nstep, y = Binomial)) +
geom_line(color = "forestgreen", size = 1) +
geom_hline(yintercept = bs_call,
linetype    = "dashed",
color       = "red",
size        = 1) +
annotate("text",
x     = round(n_max * 0.8),
y     = bs_call + 0.05,
label = "Black–Scholes",
color = "red") +
labs(
x     = "Nombre de périodes",
y     = "Prix de l'option"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
convergence_call
